// Generated by Dagger (https://dagger.dev).
package com.example.weatherapp.presentation.citiesactivity.di;

import com.example.weatherapp.domain.repositories.WeatherRepository;
import com.example.weatherapp.presentation.citiesactivity.di.factory.CitiesViewModelFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class CitiesModule_ProvideViewModelFactoryFactory implements Factory<CitiesViewModelFactory> {
  private final CitiesModule module;

  private final Provider<WeatherRepository> weatherRepositoryProvider;

  public CitiesModule_ProvideViewModelFactoryFactory(CitiesModule module,
      Provider<WeatherRepository> weatherRepositoryProvider) {
    this.module = module;
    this.weatherRepositoryProvider = weatherRepositoryProvider;
  }

  @Override
  public CitiesViewModelFactory get() {
    return provideViewModelFactory(module, weatherRepositoryProvider.get());
  }

  public static CitiesModule_ProvideViewModelFactoryFactory create(CitiesModule module,
      Provider<WeatherRepository> weatherRepositoryProvider) {
    return new CitiesModule_ProvideViewModelFactoryFactory(module, weatherRepositoryProvider);
  }

  public static CitiesViewModelFactory provideViewModelFactory(CitiesModule instance,
      WeatherRepository weatherRepository) {
    return Preconditions.checkNotNullFromProvides(instance.provideViewModelFactory(weatherRepository));
  }
}
