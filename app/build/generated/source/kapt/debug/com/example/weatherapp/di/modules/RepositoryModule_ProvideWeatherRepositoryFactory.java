// Generated by Dagger (https://dagger.dev).
package com.example.weatherapp.di.modules;

import com.example.weatherapp.data.mappers.WeatherInfoMapper;
import com.example.weatherapp.data.repositories.database.WeatherDao;
import com.example.weatherapp.data.repositories.network.WeatherAPI;
import com.example.weatherapp.domain.repositories.WeatherRepository;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RepositoryModule_ProvideWeatherRepositoryFactory implements Factory<WeatherRepository> {
  private final RepositoryModule module;

  private final Provider<WeatherAPI> weatherAPIProvider;

  private final Provider<WeatherInfoMapper> weatherInfoMapperProvider;

  private final Provider<WeatherDao> weatherDaoProvider;

  public RepositoryModule_ProvideWeatherRepositoryFactory(RepositoryModule module,
      Provider<WeatherAPI> weatherAPIProvider,
      Provider<WeatherInfoMapper> weatherInfoMapperProvider,
      Provider<WeatherDao> weatherDaoProvider) {
    this.module = module;
    this.weatherAPIProvider = weatherAPIProvider;
    this.weatherInfoMapperProvider = weatherInfoMapperProvider;
    this.weatherDaoProvider = weatherDaoProvider;
  }

  @Override
  public WeatherRepository get() {
    return provideWeatherRepository(module, weatherAPIProvider.get(), weatherInfoMapperProvider.get(), weatherDaoProvider.get());
  }

  public static RepositoryModule_ProvideWeatherRepositoryFactory create(RepositoryModule module,
      Provider<WeatherAPI> weatherAPIProvider,
      Provider<WeatherInfoMapper> weatherInfoMapperProvider,
      Provider<WeatherDao> weatherDaoProvider) {
    return new RepositoryModule_ProvideWeatherRepositoryFactory(module, weatherAPIProvider, weatherInfoMapperProvider, weatherDaoProvider);
  }

  public static WeatherRepository provideWeatherRepository(RepositoryModule instance,
      WeatherAPI weatherAPI, WeatherInfoMapper weatherInfoMapper, WeatherDao weatherDao) {
    return Preconditions.checkNotNullFromProvides(instance.provideWeatherRepository(weatherAPI, weatherInfoMapper, weatherDao));
  }
}
