// Generated by Dagger (https://dagger.dev).
package com.example.weatherapp.presentation.weatheractivity.di;

import com.example.weatherapp.domain.interactor.WeatherInteractor;
import com.example.weatherapp.presentation.weatheractivity.di.factory.WeatherViewModelFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class WeatherModule_ProvideViewModelFactoryFactory implements Factory<WeatherViewModelFactory> {
  private final WeatherModule module;

  private final Provider<WeatherInteractor> weatherInteractorProvider;

  public WeatherModule_ProvideViewModelFactoryFactory(WeatherModule module,
      Provider<WeatherInteractor> weatherInteractorProvider) {
    this.module = module;
    this.weatherInteractorProvider = weatherInteractorProvider;
  }

  @Override
  public WeatherViewModelFactory get() {
    return provideViewModelFactory(module, weatherInteractorProvider.get());
  }

  public static WeatherModule_ProvideViewModelFactoryFactory create(WeatherModule module,
      Provider<WeatherInteractor> weatherInteractorProvider) {
    return new WeatherModule_ProvideViewModelFactoryFactory(module, weatherInteractorProvider);
  }

  public static WeatherViewModelFactory provideViewModelFactory(WeatherModule instance,
      WeatherInteractor weatherInteractor) {
    return Preconditions.checkNotNullFromProvides(instance.provideViewModelFactory(weatherInteractor));
  }
}
