// Generated by Dagger (https://dagger.dev).
package com.example.weatherapp.presentation.weatheractivity.di;

import com.example.weatherapp.data.repositories.WeatherAPI;
import com.example.weatherapp.presentation.factory.ViewModelFactory;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class WeatherModule_ProvideViewModelFactoryFactory implements Factory<ViewModelFactory> {
  private final WeatherModule module;

  private final Provider<WeatherAPI> weatherAPIProvider;

  public WeatherModule_ProvideViewModelFactoryFactory(WeatherModule module,
      Provider<WeatherAPI> weatherAPIProvider) {
    this.module = module;
    this.weatherAPIProvider = weatherAPIProvider;
  }

  @Override
  public ViewModelFactory get() {
    return provideViewModelFactory(module, weatherAPIProvider.get());
  }

  public static WeatherModule_ProvideViewModelFactoryFactory create(WeatherModule module,
      Provider<WeatherAPI> weatherAPIProvider) {
    return new WeatherModule_ProvideViewModelFactoryFactory(module, weatherAPIProvider);
  }

  public static ViewModelFactory provideViewModelFactory(WeatherModule instance,
      WeatherAPI weatherAPI) {
    return Preconditions.checkNotNullFromProvides(instance.provideViewModelFactory(weatherAPI));
  }
}
