// Generated by Dagger (https://dagger.dev).
package com.example.weatherapp.di.components;

import android.app.Application;
import com.example.weatherapp.data.repositories.WeatherAPI;
import com.example.weatherapp.di.modules.NetworkModule;
import com.example.weatherapp.di.modules.NetworkModule_ProvideRetrofitFactory;
import com.example.weatherapp.di.modules.NetworkModule_ProvideWeatherAPIFactory;
import com.example.weatherapp.presentation.factory.ViewModelFactory;
import com.example.weatherapp.presentation.weatheractivity.di.WeatherModule;
import com.example.weatherapp.presentation.weatheractivity.di.WeatherModule_ProvideViewModelFactoryFactory;
import com.example.weatherapp.presentation.weatheractivity.di.WeatherSubComponent;
import com.example.weatherapp.presentation.weatheractivity.view.WeatherActivity;
import com.example.weatherapp.presentation.weatheractivity.view.WeatherActivity_MembersInjector;
import dagger.internal.DaggerGenerated;
import dagger.internal.DoubleCheck;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import retrofit2.Retrofit;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent implements AppComponent {
  private final DaggerAppComponent appComponent = this;

  private Provider<Retrofit> provideRetrofitProvider;

  private Provider<WeatherAPI> provideWeatherAPIProvider;

  private DaggerAppComponent(NetworkModule networkModuleParam, Application withApplication) {

    initialize(networkModuleParam, withApplication);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  @SuppressWarnings("unchecked")
  private void initialize(final NetworkModule networkModuleParam,
      final Application withApplication) {
    this.provideRetrofitProvider = DoubleCheck.provider(NetworkModule_ProvideRetrofitFactory.create(networkModuleParam));
    this.provideWeatherAPIProvider = DoubleCheck.provider(NetworkModule_ProvideWeatherAPIFactory.create(networkModuleParam, provideRetrofitProvider));
  }

  @Override
  public WeatherSubComponent.Builder getActivitySubComponentBuilder() {
    return new WeatherSubComponentBuilder(appComponent);
  }

  private static final class Builder implements AppComponent.Builder {
    private Application withApplication;

    @Override
    public Builder withApplication(Application application) {
      this.withApplication = Preconditions.checkNotNull(application);
      return this;
    }

    @Override
    public AppComponent build() {
      Preconditions.checkBuilderRequirement(withApplication, Application.class);
      return new DaggerAppComponent(new NetworkModule(), withApplication);
    }
  }

  private static final class WeatherSubComponentBuilder implements WeatherSubComponent.Builder {
    private final DaggerAppComponent appComponent;

    private WeatherSubComponentBuilder(DaggerAppComponent appComponent) {
      this.appComponent = appComponent;
    }

    @Override
    public WeatherSubComponent build() {
      return new WeatherSubComponentImpl(appComponent, new WeatherModule());
    }
  }

  private static final class WeatherSubComponentImpl implements WeatherSubComponent {
    private final DaggerAppComponent appComponent;

    private final WeatherSubComponentImpl weatherSubComponentImpl = this;

    private Provider<ViewModelFactory> provideViewModelFactoryProvider;

    private WeatherSubComponentImpl(DaggerAppComponent appComponent,
        WeatherModule weatherModuleParam) {
      this.appComponent = appComponent;

      initialize(weatherModuleParam);
    }

    @SuppressWarnings("unchecked")
    private void initialize(final WeatherModule weatherModuleParam) {
      this.provideViewModelFactoryProvider = DoubleCheck.provider(WeatherModule_ProvideViewModelFactoryFactory.create(weatherModuleParam, appComponent.provideWeatherAPIProvider));
    }

    @Override
    public void inject(WeatherActivity weatherActivity) {
      injectWeatherActivity(weatherActivity);
    }

    private WeatherActivity injectWeatherActivity(WeatherActivity instance) {
      WeatherActivity_MembersInjector.injectViewModelFactory(instance, provideViewModelFactoryProvider.get());
      return instance;
    }
  }
}
